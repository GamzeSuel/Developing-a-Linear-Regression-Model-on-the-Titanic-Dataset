# -*- coding: utf-8 -*-
"""gamze süel - Gorev_8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PLeFlGdpj5gVwR3FW99A2wcTyHqChG-B

# **GÖREV 8:**

**Bulduğunuz veriseti ile bir lineer regresyon modeli geliştiriniz ve modelin başarısını değerlendiriniz.**
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

import tensorflow as tf
from sklearn.model_selection import train_test_split

titanic_data = sns.load_dataset('titanic')

titanic_data

titanic_data.info()

titanic_data.columns

df = titanic_data.copy()
df

df=df.dropna()

X = df[['age',"fare"]]
y = df['survived']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=234)

from sklearn.linear_model import LinearRegression
model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error
print('MAE:', mean_absolute_error(y_pred, y_test))
print('MSE:', mean_squared_error(y_pred, y_test))

import numpy as np
print('RMSE:', np.sqrt(mean_squared_error(y_pred, y_test)))

coef = model.coef_
intercept = model.intercept_

print('Bias:', intercept)

print('Carpanlar')
for i, coef in enumerate(coef):
  print(X.columns[i], ':', coef)



"""polinominal"""

import pandas as pd
from sklearn.linear_model import LinearRegression

numerical_features = ['pclass', 'age', 'sibsp', 'parch', 'fare']
X_train_numerical = X_train[numerical_features]

linear_model = LinearRegression()
linear_model.fit(X_train_numerical, y_train)
y_pred_linear = linear_model.predict(X_test_numerical)

X_test_numerical = X_test[numerical_features]
y_pred_poly = poly_model.predict(X_test_numerical)

poly_mae = mean_absolute_error(y_pred_poly, y_test)
print('Poly MAE:', poly_mae)

poly_mse = mean_squared_error(y_pred_poly, y_test)
print('Poly MSE:', poly_mse)

print('Poly RMSE:', np.sqrt(poly_mse))

plt.figure(figsize=(12,6))
plt.scatter(X_test_numerical['age'], y_test, color='black', marker='*', s=200, label='Gercek')
plt.scatter(X_test_numerical['age'], y_pred_linear, color='blue', label='Linear Regression')
plt.scatter(X_test_numerical['age'], y_pred_poly, color='red', label='Polynomial Regression')
plt.legend()